/* 

계산
evaluation

기호
리터럴 literal
연산자  operator
피연산자 opeand

식
표현식 expression

해석
파싱 parsing

*/

/*
const 키워드를 사용해 선언한 변수는 재할당이 금지된다.
즉, const 키워드는 단 한번만 할당 할 수 있는 변수를 선언
따라서 const 키워드를 사용하면 상수를 표현할 수 있다.
상수 - 변하지 않는 수
*/

/*

값.

값은 식이 평가 되어 생성된 결과를 말한다.
값 value
식 표현식 expression
평가 evaluate

평가란 식을 해석해서 값을 생성하거나 참조하는 것

*/

/*

리터럴 literal 
 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법
문자 - 아라비아 숫자 / 알파벳 / 한글
약속된 기호 - ''/ "" / [] / {} / //

 표기법 notation

값을 생성하기 위해 미리 약속한 표기법

*/

/*

표현식 expression

값으로 평가될 수 있는 문

문 statement

표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조

값으로 평가될 수 있는 문은 모두 표현식

표현식은 값으로 평가

표현식과 표현식이 평가된 값은 동등한 관계 동치

동치  equivalent

표현식은 값처럼 사용할 수 있다

    ex) 숫자 값이 위치해야할 자리에 표현식 x를 사용할 수 있다

표현식은 다른 표현식의 일부가 되어 새로운 값을 만들어 낼 수 있다

*/

/* 

문 statement
프로그램을 구성하는 기본단위이자 최소 실행 단위
문의 집합으로 이루어진 것이 바로 프로그램
문을 작성하고 순서에 맞게 나열하는 것이 프로그래밍

문은 여러 토큰으로 구성

토큰 token
문법적인 의미를 가지며 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소

예
키워드 식별자 연산자 리터럴 세미콜론 마침표 등의 특수 기호

문 = 명령문

문 - 선언문 / 할당문 / 조건문 / 반복문

선언문
var x;

할당문
x = 5;

함수 조건문
function foo () {}

조건문
if (x>1) {console.log(x)} 

반복문
for(var i = 0; i < 2; i++) {console.log(i);}

*/


/*

표현식인 문 표현식 아닌 문

구별 방법
변수에 할당해보는 것

표현식인 문은 값으로 평가되므로 변수에 할당할 수 있다
    -> 평가된 값을 반환
표현식이 아닌 문은 값으로 평가 할 수 없으므로 변수에 할당하면 에러 발생
    -> 완료 값 undefined 출력
    완료값 completion value

*/
