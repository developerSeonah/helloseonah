Javascript
    1996년 3월
    10일만에 태어난 언어
    "html 페이지를 동적으로 만들고 싶어 -> 가벼운 언어 -> 성능 좋지않음
    
자바스크립트는 인터프리터 언어
    안녕하세요 -> 컴파일 - 기계어 -> 0101010101
    컴파일 언어와는 반대로 변환 과정 없이 소스 코드를 바로 실행하는 프로그램 언어
    v8 엔진에 의하여 필요에 따라 컴파일 과정을 거칠 수 있도록 자바스크립트의 성능을 향상

    JSON (데이터양식, 키와값으로 이뤄짐, 자바스크립트의 객체 표현의 줄임말)


JS 적용봅

    -내부-

    <html>
        <script>
        ...js 문법
        </script>
    </html>


    -외부-
        *.js
        <html>
        ...
            <script src ="경로"></script>
        </html>

----------------------------------------------------------------------------

    입출력

    <입력 :input>
   ** console.log()
    console.error()
    window.(:생략가능) alert()
    window. cinfirm()

    <출력 : output>
    window. prompt()

    *개발 중 에러가 생김 -> 어디서 에러가 났는지 알수있나?
    1~10 까지 개발
    5 -> console.log(5) -> 잘나와-> 6~10 이 문제 일수있음
    8 -> consoleqog(8) -> 안나와 -> 6~8 이 문제임
        ->개발중 디버깅을 위해서 조그를 확인할 필요가 있고 이때 console.log()를 활용하여
        에러가 난 범위를 좁혀가며 디버깅 할 수 있다.

----------------------------------------------------------------------------

*JS를 브라우저 환경이 아닌 다른 환경에서 직접 실행할 수 있는 NodeJS 환경에서는 window가 실행되지않음

NodeJS 
    크롬의 v8엔진을 브라우저 바깥으로 꺼내어 JS를 브라우저 외부에서도 실행할수 있도록 하는 런타임(환경, 실핼)
    대표적으로 reat-Js 와 같은 js 기반 프레임워크(도구) 들이 nodeJS 환경에서 실행된다
    =html대신 js로 쓰고 js를 html안에 직접 작성

    ----------------------------------------------------------------------------

자바스크립트 자료형 (데이터 종류, 타입)

원시타입
    string 문자열(문자)
    boolean 참거짓(T/F)
    undefined(데이터의 타입이 지정되어있지 않은 상태)
    null (값이 명확히 비어있는 상태)
    symbol (이터러블 오브젝트의 키 값으로 사용)

객체타입, 참조타입(집단)
    자바스크립트에서 원시타입을 제외한 모든것은 객체타입
    하나의 데이터가 아닌 여러 데이터가 집단을 이루고 있는 경우가 많음
    
 ---------------------------------------------------------------------------------

변수
    위의 데이터 타입을 직접 기입해서 사용할 수 있지만
    ex) console.log(5)
        console.log(5+1) -->6    이런식으로 사용해야함 (과정을 다 필기)

    그러나 해당 데이터를 컴퓨터가 기억하게 하여 일회성 사용으로 그치지 않고
    그다음 실행에서도 이어서 실행할수 있으며 재사용이 가능하도록 하기 위해 변수를 사용한다.

    변수: 값을 바꿀수 있고/ 바뀌는값을 재사용하기 위해 사용
    상수: 값을 바꿀수 없음. 항상 변하지 않는 값/ 바뀌지 않지만 재사용하기 위해 사용

    var , let , const를 이용하여 정의(선언) 할 수 있음
    *자바스크립트에서는 변수를 선언할때 자료형을 따로 지정하지 않는다
        ex) 
            다른 언어
            int a =5;
                =>a ="인" (X)

            자바스크립트에서는
            let a = 5;
                a= "인"(o)   -> let:number a ="5" (타입스크립트)
    
    선언
        let/const 변수명 = 값; (선언과 할당)

        let 변수명(선언)
        변수명 = 값; (할당)
        -const는 상수이기 때문에 재할당이 불가능 하여 선언과 할당을 동시에 해야만함
        -반면 let, var 은 변수이기 때문에 선언 후 할당이 가능

---------------------------------------------------------------------------------

var  ->더이상 사용하지 않음
        ES4를 사용해야하는 전자정부플세임워크 기반의 회사가 아닌 이상 사용되지 않음

    옛날에(ES6) 사용하던 변수 표현법

    let/const와 var의 차이점

        알아야하는 이유?
        1.면접
        2.의도적으로 var

        호이스팅
            선언부가 상단으로 끌어올려져 선언 이전에도 사용이 가능한 상태
            자바스크립트는 실행 전 선언부를 먼저 수집하여 평가(저장) -> 실행

            ex)

            console.log(a)
            var a =5;

            =>이렇게 되면 자바스크립트는 아직 값이 할당되지는 않았지만 a 값을 인지하여 undefined 으로 값이나옴
            =>이렇게 나오면 안됨
            =>var는 수집단계에 수집되어 값이 주어지기 전에도 사용이 가능하며 이러한 현상은 개발과정에서
            예외상황이 발생하기 쉽다
            이를 방지하기 위해 let, const가 등장 하엿으며 이는 var와 다른곳에 저장되어 값이 없다면 에러가 나오게 설정됨

            var는 중복 선언도 가능
            let, const 는 중복 선언 불가능

            반면, let / const 는 수집단계에서부터 다른곳에 저장되어 같이 할당되지않으면
            참조 에러가 나오도록 설정된 신규 변수

---------------------------------------------------------------------------------

연산자

    산술연산자
        (+,-,*,/,%) (%는 우리가아는 퍼센트 아니고 나머지 라는 뜻)

        let a =5;
        let b=2;

        console.log(a+b) //7 
        console.log(a-b) //2
        console.log(a/b) //2.5

        -----------------------

        let a =1;
        leat b = true
        (true=컴터에서 1로 인식 하고 false =2로인식)

        a+null =>1  (null은 0)
        1+undefined => NAN (Not a number)

        -------------------------------------------


    단황산술 연산자

        ++ 값이 1증가
        -- 값이 1 감소
        + 영향x
        - 음수화

        ex)
            ++a
            -a
            1 + "2" ="12"
            (더하기 연산자일때 하나의 항에 문자열이 있다면 문자열 결과 / 1도 문자열로 인식 / 마이너스일땐 에러뜰듯)

    전위연산자
        ++a :전위 연산자
        a++ :후위 연산자

        let a = 5;
        console.log(++a)  -> console.log(), a 값이 존재
            => 콘솔로그 실행전에 값 더하기   ==> 6
        console.log(a++)  --------------------> 6    +1
        console.log(a) -----------------------> 7

        
        console.log(a++) 

    문자열 연결 연산자

        피연산자의 항 중 하나 이상이 문자열인 경우 문자열을 이어서 더해 동작
        "안" + "녕" = 안녕
        "안녕하세요"-"하세요" = NAN 
        1 + "2" = "12"
        "1" + "2" = "12"
        true + "2" = "true2"


    할당 연산자

    = 
        ex) let a =5;

    +=
        ex) a += 1 :   => a= a+1
            //문자열의 경우 반복문과 함께 자주 사용
    -=

        ex) a -= 1; --> a = a - 1
    *=
        ex) a *= 1; --> a = a * 1
    ...

    우선순위

        10 * (2 + 2) = > 40
        => 괄호라고 생각하기
--------------------------------------------------

    논리연산자 / 비교 연산자
        true/false -> 참이냐 거짓이냐
    
    비교연산자
        == 동등비교   -> X == Y ( X Y 의 값이 같은지)
                        ex) 
                            a=3
                            b="3" 
                            a==b //true

        === 일치비교  -> x ===y (x 와 y 값과 자료
        

        != 부등비교 -> x != y ( x와 y값이 다른지)

                        ex) a != b // a랑b랑 달라? 응 달라(true) / 아니 달라 (false)
                            3 과 "3"은 값이 같기 때문에 false

        !== 불일치비교 -> x !== y (x, y의 값 혹은 타입이 달라? // 둘중 하나만 달라도 달라!)
                        ex) a !== b // a 와 b 는 값과 타입이 모두 달라? 아니 값은 같지만 타입은 달라 (true)
                        ===> 완벽히 일치한지 보는것

      