

/*

객체 object

자바스크립트는 객체 기반의 프로그래밍 언어
자바스크립트를 구성하는 거의 '모든 것'이 객체
    원시값 제외한 모든값 
    숫자 number  문자열 string 불리언 boolean undefined null 심벌 symbol

원시 타입
단 하나의 값만 나타냄

원시 값
변경 불가능한 값

객체 타입
다양한 타입의 값을 하나의 단위로 구성한 복합적인 자료 구조

객체 타입 값
객체 변경 가능한 값

*/

//기본 객체
// 0개 이상의 프로퍼티로 구성된 집합
// 프로퍼티 키와 값

var person = {
    name: 'Lee',
    age: 20
};

// 함수는 일급 객체
// 함수를 값으로 취급 가능
// 함수도 프로퍼티의 값으로 사용 가능
// 이 때 함수는 메서드로 구분

var counter = {
    num : 0,
    increase: function(){
        this.num++;
    }
};

//프로퍼티 : 객체의 상태를 나타내는 값
// 메서드 : 프로퍼티 (상태 데이터)를 참조하고 조작할 수 있는 동작

// 객체는 
// 상태(프로퍼티)와 동작(메서드)을 하나의 단위로 구조화

// 객체의 집합으로 프로그램을 표현
// 프로그램 패러다임을 객체 지향 프로그래밍이라고 한다


// 문자열로 평가할 수 있는 표현식을 사용해 프로퍼티 키를 동적으로 생성 가능

var obj = {};
var key = 'hello';

obj[key] = 'world';
console.log(obj); // {'hello':'world'}

//대괄호 프로퍼티 접근 연산자 내부에 지정하는 프로퍼티 키는 반드시 따옴표로 감싼 문자열
var person = {
    name:'Lee'
};

console.log(person.name);
console.log(person['name']);


// ES5 vs ES6
// ES5
var x =1, y=2;

var obj {
    x : x,
    y : y
}
// ES6
let x=1,y=2;

const obj = {x,y};


/*

11장 원시 값과 객체의 비교

원시 타입 vs 객체 타입

1. 원시 타입의 값, 즉 원시 값은 변경 불가능한 값
    객체(참조) 타입의 값, 즉 객체는 변경 가능한 값

2. 원시 값을 변수에 할당하면 변수에는 실제 값이 저장
    객체를 변수에 할당하면 변수에는 참조 값이 저장

3. 값에 의한 할당 / 참조에 의한 전달
값에 의한 전달
원시 값을 갖는 변수를 다른 변수에 할당하면 원본의 원시 값이 복사되어 전달
참조에 의한 전달
객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달

*/

/*

원시 값

    1. 변경 불가능한 값
    2. 문자의 불변성
    3. 값에 의한 전달

*/

/*

객체

    1. 변경 가능한 값
        참조값
        생성된 객체가 저장된 메모리 공간의 주소 그 자체
    2. 참조에 의한 전달

*/


