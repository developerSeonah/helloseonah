

    * 함수

    어디로 흘러가서 어떻게 변화되는지 흐름 파악 필요!

    지역 변수, 전역변수, 스코프, 스코프 체이닝

--------------------------------------

함수 
 자바스크립트는 함수 지향 프로그래밍언어이다.
    
    함수 지향 프로그래밍이란
        프로그래밍 패러다임의 한 종류

        프로그래밍 패러다임?
            개발 방법 중 하나,
            개발자가 어떠한 관점을 갖고 프로그래밍에 임하는지

            명령형 프로그래밍
                절차 지향 : 순서를 중요 시, 컴퓨터와 처리구조와 유사
                            (ex. C, Colbol ...)
                객체 지향 : 객체들의 집합으로 프로그래밍의 상호작용 표현
                            (ex. Java)

            선언형 프로그래밍
                함수 지향 : 순수 함수를 조합하고 프로그래밍을 만드는 방식
                            (ex. javascript)

        함수 지향 프로그래밍 관련 용어

            불변성 -> 함수 밖에서 함수 내부의 데이터 변형을 일으키지 않는다.
            * 클로저 -> 부모함수가 실행 종료되어도 참조할 수 있는 내부 함수는 기억된다.

            순수함수 -> 입력된 값에만 의존하고, 외부 효과는 영향을 미치지 않는다.
            일급객체 함수 -> 함수는 입력값이 될 수 도 있고 반환 값이 될 수도 있다.

            유지관리 가능성 -> 외부 효과에 의존하지 않기 떄문에 유지보수 용이
            * 모듈화 -> 한가지 기능 이상의 코드 집단(모듈)으로 분리하여 재사용

            부수효과 -> 함수 밖에서 함수 안의 반환 값에 영향을 끼치는 것 (사이드 이펙트, 외부 효과)
            참조 투명성 -> 동일한 값에는 항상 동일한 반환 값

    => 함수 지향 프로그래밍이란?
        코드를 분리하여 (모듈화) 필요에 따라 조합하고 재사용할 수 있게 작성


--------------------------------------

    함수 
        어떤 기능(특정 연산)을 하는 코드의 집단
        ex)
            function addNumber(파라미터1, 파라미터2, ...) {
                ... 연산
                return 반환값 (생략 가능)
            }


            * 선언부와 실행부가 나뉘어져 있다.
            * 실행부에서는 선언부가 파라미터로 (전달된 값) 받을 값을 전달

            함수명(전달 값1, 전달 값2)
            addNumber(2,3)

            * 함수의 실행부는 반환 값(return)이 없음 => undefined
            const a = addNumber(2,3)       
            console.log(a) // undefined

            ex)
                function addNumber(num1, num2){
                    console.log(num1+num2);
                }
                addNumber(2,3) // 5

                console.log(add)

            * 함수에서 연산한 결과값을 외부에서도 사용하고 싶을 떄

            ex)
            function addNumber(num1, num2){
                return(반환 값) num1 + num2
            }

            addNumber(3,5)
            console.log(addNumber(3,5)) // 8
            const a = addNumber(3,5) + 3 // 11
                        ----- 8


        => 함수에 반환(return)이 없으면 함수 실행부의 값은 undefined이다
            return의 유무는 함수 내의 연산을 바깥에서도 사용할지 작성자가 직접 정하는 것

        * return, 실행부, 선언부, 인자, 인수로 나뉜다


--------------------------------------

    함수 종류

    (1) 기명함수
        -> 이름을 지어주고 컴퓨터에게 기억시킨 것

        ex)
        function printHello(){
            console.log("hello");
        }

    (2) 익명함수
        -> 재사용 될 필요가 없는 함수며 콜백함수나 즉시실행함수

        ex)
        function(){
            ...연산
        }

        함수명(function())
        => 익명함수는 재사용 가능성이 없고, 혼자서 실행 할 서 없기 때문에
        다른 함수에 의해 실행되거나, 즉기 실행함수로서 사용한다.
         
    (3) 재귀함수
        -> 함수 안에서 같은 함수를 반복
            (최단 경로 관련 알고리즘)

            funciton f(n){
                //ealiry return
                if(n <= 1){
                    return 1
                }
                     
                //{}중괄호 생략 가능
                if(n <= 1) return 1
                return n + f(n-1)
            }

            f(10)
            //10+9+8+7+6+5+4+3+2+1

    (4) 즉시실행함수
        (funtion(num1,num2){

        })(2,3)
        
        * ()()
        => 선언과 동시에 실행

    (5) 화살표 함수
        ->ES6 (자바스크립트 안에 핵심 코어 스크립트) - ES2015
          이후에 등장
          "=>"를 사용하여 보다 간략한 방법으로 함수를 선언할 수 있는 표현식

          ex)
          function a(param1,param2){
            ...
          }

          const a = (param1, param2) => {

          }

--------------------------------------

지역 변수, 전역변수,  스코프, 스코프 체이닝

scope 
    변수에 접근할 수 있는 범위
    변수를 찾기 위한 규칙

    - 전역 스코프, 지역 스코프
    전역 스코프
        어디서나 접근할 수 있는 값이 저장
    지역 스코프
        특정한 블럭({})에서 사용할 수 있는 값이 저장

    1. 지역 변수
        지역 스코프에 저장되며,특정한 구역에서만 사용 가능
        특정 구역을 벗어나면 메모리에서 사라집니다.

    






    