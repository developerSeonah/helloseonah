 
배열

    내장함수 (원본배열, 복사본, 반환 값의 유무)
            push()
                ()안의 데이터를 원본 배열의 맨 끝 요소(el)로 추가
                //arr이 원본 배열
            ex) arr = ["짱구","신형만"]
                arr.push("흰둥이")
                console.log(arr) //["짱구","신형만","흰둥이"]


            pop()
                원본 배열의 맨 끝 요소를 제거, 제거된 요소를 반환

                ex)
                    const arr = [1,2,3,4]
                    const a = arr.pop()
                    console.log(arr) // [1,2,3]
                    console.log(a) //4

            unshift()
                ()안의 데이터를 원본 배열의 맨 앞에 추가

            shift
                원본 배열의 맨 앞에 요소를 제거, 제거된 요소를 반환

            concat(arr1, arr2)
                ()안의 두 배열을 합친 하나의 복사본 배열을 반환

                arr1 = [1,2,3,4,5] arr2=[1,2,3,4]
                [1,2,3,4,5,1,2,3,4]
                ex)arr3 = arr1.concat(arr2) 
                    console.log(arr3) //[arr1,arr2]

            join
                배열 요소 사이에 원하는 문자를 삽입한 문자열을 반환
                ex) [1,2,3,4,5].join("-") => "1-2-3-4-5"
                    [1,2,3,4,5].join() => "12345"
                    ["<div>", ... ].join() => "<div></div>
                                               <div></div>"

            reverse
                원본 배열 역순 배치
                ex)
                    [1,2,3,4,5] -> [5,4,3,2,1]

            splice(start, count, item)
                - start부터 시작하는 인덱스 번호부터 count만큼 원본 배열에 요소를 제거
                - 제거한 부분에 item을 대체할 수 있음
                - 배열의 특정 부분을 제거

                const arr = [1,2,3,4,5,6,7]
                arr.splice(3,3,"hello")
                (1, 2, 3, hello, 7)

            slice(start, end)
                - 원본 배열의 데이터를 삭제하지는 않으나, start부터 end 직전까지(포함x)
                - 잘라서 복사본으로 반환
                - 배열의 특정 부분을 복사

            indexOf
            includes

--------------------------------------------------------------

콜백 함수
    부모 함수의 인자로 함수가 전달, 그러나 해당 함수의 실행은
    부모 함수에 의해서 실행되고 매개변수도 부모함수에서 전달 받습니다.

익명함수 예시)
    function 부모함수(자식함수){
        ...
        자식함수("안녕하세요")
    }
    부모함수((str)=>{
        conosole.glo(str)
    })

기명함수 예시)
    function a (str){
        console.log(str)
    }

    //인자값 a 실행시
    // function b(a){
        //a("안녕하세요")
        //위에 function a 실행 str에 안녕하세요 대입
    //}   
    function b(func){

        func("안녕하세요")
    }

    //실행부
    b(a)

딥다이브 예시)
    function repeat(n, f){
        for(var i = 0; i < n; i ++){
            f(i);
        }
    };
    var logAll = function(i) {
        console.log(i);
    };
    repeat(5,logAll); // 0,1,2,3,4

    var logOdds = function(i) {
        if(i % 2) console.log(i);
    }
    

--------------------------------------------------------------

**콜백함수의 중요한 점. 기억해야할 점.
    콜백함수의 매개변수는 부모함수에서 주는 것이다.
    부모함수에서 매개변수를 전달해 주었다.

    딥다이브 ->
        함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 콜백 함수
        매개 변수를 통해 함수의 외부에서 콜백 함수를 전달 받은 함수를 고차 함수

고차함수
    map
        배열을 순회(순서대로 반복)하며 각 요소에 대하여 인자로 주어진
        **콜백함수의 반환 값으로 새ㄴ로운 배열을 생성**

    ex)
        arr = [1,2,3,4,5]
        const arr2 = arr.map((el, index, origin)=>{
            return el + 1
        })
        console.log(arr2) //[2,3,4,5,6]    

        function map(arr, func){
            let result;
            for(let i=0; i<arr.legnth; i++;){
                //console.log(arr[i]) -> [1,2,3,4,5]
                result.push(func(arr[i],i,arr))
                //func 함수를 총 5번 실행

            }
            return result;
        }

                    //arr=1,2,3,4,5
        const b = map(arr, (el)=> { 
            return el + 1
        }) 

    딥다이브 예시)

    var res = [1,2,3].map(function(item)){
        return item * 2;
    }
    console.log(res) //[2,4,6]

-----------------------------------------------------

    filters
    //특정 조건을 맞는 요소들만 선택하여 새로운 배열이 필요
    //삭제

        arr = [1,2,3,4,5]
                                        //조건식
        const arr2 = arr.filter((el)=> el!==5)
            //1,2,3,4

        딥다이브 예시)
        res = [1,2,3].fillter(function(item){
            return item % 2;
        })

        console.log(res); //[1,3]

-----------------------------------------------------

    find
      배열 순회, 콜백 함수, 조건식에 맞는 첫번째 요소 반환  
        //중복된 데이터가 있어도 첫번째 요소만 반환
    내가 찾고자 하는 특정 요소를 찾을 때 -> find
    내가 찾고자 하는 특정 조건을 만족하는 여러 요소를 찾을 때 -> filter
    //수정

    findIndex
        배열 순회, 콜백함수, 조건식에 맞는 첫번째 요소의 인덱스 반환
        값이 없다면 -1

    ex) 
        const posts = [
            {
                id: 1,
                content: "내용",
                title : "제목",
                User: {
                    nickName: "seonahPark123"
                }
            },
            {
                id: 2,
                content: "내용",
                title : "제목",
                User: {
                    nickName: "seonahPark123"
                }
            },
            {
                id: 3,
                content: "내용",
                title : "제목",
                User: {
                    nickName: "seonahPark123"
                }
            }
        ]

        const findPost = posts.find((el) => el.id === 3)
        findPost.content = "수정 내용"

        const findPostIndex = posts.findIndex((el)=> el.id === 3)
        posts[findPostIndex].content = "수정 내용"

-----------------------------------------------------

    * reduce
    every
    some
    sort

+ 배열 생성, 유사 배열 객체, forEach, for...in, for...of


-----------------------------------------------------
